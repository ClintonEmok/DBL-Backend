)
#Front-End
shinyUI(fluidPage(
#Application Title
titlePanel(),
#sidebar layout
sidebarLayout(
#sidebar panel
sidebarPanel(),
#main panel
mainPanel()
)
))
#Front-End
shinyUI(fluidPage(
#Application Title
titlePanel(title = "Animations"),
#sidebar layout
sidebarLayout(
#sidebar panel
sidebarPanel("interactivity will show up here"),
#main panel
mainPanel("animations will show up here")
)
))
#Front-End
shinyUI(fluidPage(
#Application Title
titlePanel(title = "Animations"),
#sidebar layout
sidebarLayout(
#sidebar panel
sidebarPanel("interactivity will show up here"),
#main panel
mainPanel("animations will show up here")
)
))
library(shiny)
#Back-End
shinyServer(
function(input, output){
}
)
library(shiny)
#Back-End
shinyServer(
function(input, output){
}
)
?function
getwd()
getwd()
?function
?function()
?function()
a
runApp()
runApp()
tracking_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
tracking_data <- as.data.frame(read.csv('metro_data.csv', sep = ';', encoding = "latin-1"))
View(tracking_data)
tracking_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
runApp()
runApp()
?shinyServer
runApp()
?read.delim
maplist <- as.vector(read.delim("/DBL-Backend/Stimulimap.txt"))
maplist <- as.vector(read.delim("../DBL-Backend/Stimulimap.txt"))
getwd()
maplist <- as.vector(read.delim("C:/Users/20190771/Documents/GitHub/DBL-Backend/Stimulimap.txt"))
View(maplist)
?reactive()
runApp()
#Front-End
shinyUI(fluidPage(
titlePanel(title = "Animations"),
sidebarLayout(
sidebarPanel(("Select a map"),
selectInput("map", "select a map from the drop down list", maplist, selectize = FALSE)
),
mainPanel(("animations will show up here"),
textOutput("mymap"))
)
))
runApp()
runApp()
maplist <- as.vector(read.delim("~/DBL-Backend/Stimulimap.txt"))
maplist <- as.vector(read.delim("~/DBL-Backend/Stimulimap.txt"))
runApp()
runApp()
maplist <- as.vector(read.delim("C:/Users/20190771/Documents/DBL-Backend/Stimulimap.txt"))
getwd()
maplist <- as.vector(read.delim("C:/Users/20190771/Documents/GitHub/DBL-Backend/Stimulimap.txt"))
shiny::runApp()
tracking_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
runApp()
#Front-End
shinyUI(fluidPage(
titlePanel(title = "Animations"),
sidebarLayout(
sidebarPanel(h3("Select the Features"),
selectInput("map", "Select a map from the drop down list", maplist)
),
mainPanel(("animations will show up here"),
textOutput("mymap"))
)
))
runApp()
runApp()
runApp()
?paste
runApp('~/GitHub/DBL-Backend/flowchartwithinput.R')
?subset
?br
?br()
runApp()
runApp()
runApp()
?subset
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
?isolate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?eventReactive
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?DT
install.packages("DT")
?isolate
runApp()
runApp()
runApp()
print(5)
runApp()
print("1")
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(tracking_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tracking_data <- read.csv('metro_data.csv', sep = ';')
stim_list = c(tracking_data$StimuliName)
stim_list_unique <- unique(stim_list)
library(shiny); runApp('~/GitHub/DBL-Backend/flowchartwithinput.R')
library(shiny)
library(cluster)    # clustering algorithms
library(factoextra) # clustering algorithms & visualization
library(dplyr)
library(markovchain)
library(lattice)
library(diagram)
tracking_data <- read.csv('metro_data.csv', sep = ';')
stim_list = c(tracking_data$StimuliName)
stim_list_unique <- unique(stim_list)
runApp('~/GitHub/DBL-Backend/flowchartwithinput.R')
runApp()
maplist <- as.vector(read.delim("C:/Users/20190771/Documents/GitHub/DBL-Backend/Stimulimap.txt"))
#Importing & Preprocessing Data
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?fc()
?reac()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?background_image
?backgroung_image()
?background_image()
runApp()
runApp()
runApp()
maplist <- unique(c(metro_data$StimuliName))
runApp()
maplist <- c(metro_data$StimuliName)
metro_data$StimuliName
unique(metro_data$StimuliName)
maplist <- unique(metro_data$StimuliName)
runApp()
runApp()
runApp()
#Importing & Preprocessing Data
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
maplist <- unique(metro_data$StimuliName)
runApp()
getwd()
maplist <- as.vector(read.delim("C:/Users/20190771/Documents/GitHub/DBL-Backend/Stimulimap.txt"))
runApp()
View(metro_data)
runApp()
tracking_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
map.data <- tracking_data[tracking_data["StimuliName"] == "04_KÃ¶ln_S1.jpg",]
rownames(map.data) <- 1:nrow(map.data)
map.data$index <- 1:nrow(map.data)
map.data$user.index <- 1:nrow(map.data)
user.count <- 1
for(i in 2:nrow(map.data)){
if(map.data[i, 7] == map.data[i-1, 7]){
user.count <- user.count + 1
map.data[i, 10] <- user.count
} else {
user.count <- 1
map.data[i, 10] = user.count
}
}
max.index <- map.data[map.data$user.index == max(map.data$user.index), 10]
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
map_plot
library(ggplot2)
library(gganimate)
library(jpeg)
library(ggpubr)
library(plyr)
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
map_plot
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
View(map.data)
dev.off()
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
#background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
rlang::last_error()
rlang::last_trace()
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
#background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
map_anim = map_plot +
labs(title = "Frame = {frame_time}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 15, fps = 5, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
animate(map_anim, nframes = 25, fps = 5, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
animate(map_anim, nframes = 39, fps = 5, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1], end_pause = 30)
map_anim = map_plot +
labs(title = "Frame = {frame_time}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1], end_pause = 30)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
#background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
map_anim = map_plot +
labs(title = "Frame = {frame_time}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1], end_pause = 30)
runApp()
maplist <- unique(metro_data$StimuliName)
#Importing & Preprocessing Data
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
maplist <- unique(metro_data$StimuliName)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("readbitmap")
library(readbitmap)
getwd()
?req
?req()
shiny::runApp()
?background_image
library(ggpubr)
?background_image
library(shiny)
library(ggplot2)
library(gganimate)
library(readbitmap)
runApp()
runApp()
runApp()
getwd()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
?showModal
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?integer
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
userlist <- unique(metro_data$user)
runApp()
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
userlist <- unique(mapdata$user)
#creating the index column
mapdata <- subset(metro_data, StimuliName == input$map)
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
maplist <- unique(metro_data$StimuliName)
runApp()
userlist <- unique(metro_data$user)
userlist
runApp()
runApp()
runApp()
userlist <- as.character(unique(metro_data$user))
runApp()
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
runApp()
runApp()
runApp()
runApp()
runApp()
View(metro_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
observeEvent(input$backImage, {
inFile <- input$backImage
if(is.null(inFile))
return()
file.copy(inFile$datapath, file.path("C:/Users/20190771/Documents/GitHub/DBL-Backend/R/DBL/Server Upload", inFile$name))
})
runApp()
runApp()
runApp()
runApp()
?dataURI
runApp()
runApp()

runApp()
runApp()
#Importing & Preprocessing Data
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
maplist <- unique(metro_data$StimuliName)
runApp()
getwd()
maplist <- as.vector(read.delim("C:/Users/20190771/Documents/GitHub/DBL-Backend/Stimulimap.txt"))
runApp()
View(metro_data)
runApp()
tracking_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
map.data <- tracking_data[tracking_data["StimuliName"] == "04_KÃ¶ln_S1.jpg",]
rownames(map.data) <- 1:nrow(map.data)
map.data$index <- 1:nrow(map.data)
map.data$user.index <- 1:nrow(map.data)
user.count <- 1
for(i in 2:nrow(map.data)){
if(map.data[i, 7] == map.data[i-1, 7]){
user.count <- user.count + 1
map.data[i, 10] <- user.count
} else {
user.count <- 1
map.data[i, 10] = user.count
}
}
max.index <- map.data[map.data$user.index == max(map.data$user.index), 10]
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
map_plot
library(ggplot2)
library(gganimate)
library(jpeg)
library(ggpubr)
library(plyr)
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
map_plot
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
View(map.data)
dev.off()
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
#background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
xlim(50,dim_img[2]) +
ylim(dim_img[1], 50)
rlang::last_error()
rlang::last_trace()
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
#background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
map_anim = map_plot +
labs(title = "Frame = {frame_time}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 15, fps = 5, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
animate(map_anim, nframes = 25, fps = 5, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
animate(map_anim, nframes = 39, fps = 5, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50)*3, height = dim_img[1]*3, end_pause = 30)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1], end_pause = 30)
map_anim = map_plot +
labs(title = "Frame = {frame_time}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1], end_pause = 30)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
#background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
map_anim = map_plot +
labs(title = "Frame = {frame_time}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1], end_pause = 30)
runApp()
maplist <- unique(metro_data$StimuliName)
#Importing & Preprocessing Data
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
maplist <- unique(metro_data$StimuliName)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("readbitmap")
library(readbitmap)
getwd()
?req
?req()
shiny::runApp()
?background_image
library(ggpubr)
?background_image
library(shiny)
library(ggplot2)
library(gganimate)
library(readbitmap)
runApp()
runApp()
runApp()
getwd()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
?showModal
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?integer
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
userlist <- unique(metro_data$user)
runApp()
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
userlist <- unique(mapdata$user)
#creating the index column
mapdata <- subset(metro_data, StimuliName == input$map)
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
maplist <- unique(metro_data$StimuliName)
runApp()
userlist <- unique(metro_data$user)
userlist
runApp()
runApp()
runApp()
userlist <- as.character(unique(metro_data$user))
runApp()
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
runApp()
runApp()
runApp()
runApp()
runApp()
View(metro_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
observeEvent(input$backImage, {
inFile <- input$backImage
if(is.null(inFile))
return()
file.copy(inFile$datapath, file.path("C:/Users/20190771/Documents/GitHub/DBL-Backend/R/DBL/Server Upload", inFile$name))
})
runApp()
runApp()
runApp()
runApp()
?dataURI
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
library(stringr)
userlist <- str_sort(userlist, numeric = FALSE, decreasing = FALSE, locale = "en")
userlist <- str_sort(userlist, numeric = FALSE, decreasing = FALSE, locale = "en")
runApp()
userlist <- str_order(userlist, numeric = FALSE, decreasing = FALSE, locale = "en")
userlist
runApp()
userlist <- as.character(unique(metro_data$user))
userlist
userlist <- str_sort(userlist, numeric = FALSE, decreasing = FALSE, locale = "en")
userlist
userlist <- str_sort(userlist, numeric = FALSE, decreasing = FALSE, locale = "en", na_last = FALSE)
userlist
userlist <- str_sort(userlist, numeric = FALSE, decreasing = TRUE, locale = "en", na_last = FALSE)
userlist
userlist <- str_sort(userlist, numeric = TRUE)
userlist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?animate
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
userlist <- metro_data$user %>% unique() %>% as.character()
userlist <- str_sort(userlist, numeric = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
?selectInput
library(shinyWidgets)
runApp()
runApp()
runApp()
runApp()
getwd()
?par
tracking_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
map.data <- tracking_data[tracking_data["StimuliName"] == "02_Berlin_S1.jpg",]
?plot
plot(map.data)
plot(map.data, x = 'MappedFixationPointX', y = 'MappedFixationPointY')
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY)
map.data <- tracking_data[tracking_data["StimuliName"] == "01_Antwerpen_S1.jpg",]
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY)
?plot
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY, type = b)
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY, type = 'b')
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY, type = 'p', xlim = c(0,1600), ylim = (1200, 0))
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY, type = 'p', xlim = c(0,1600), ylim = c(1200, 0))
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY, type = 'p', xlim = c(0,1650), ylim = (1200, 0))
plot(x = map.data$MappedFixationPointX, y = map.data$MappedFixationPointY, type = 'p', xlim = c(0,1650), ylim = c(1200, 0))
library(shiny)
library(shinyWidgets)
#Front-End
shinyUI(fluidPage(
titlePanel(title = "Animations"),
sidebarLayout(
sidebarPanel(h3("Select the Features"),
selectInput("map", "Select a map from the drop down list", maplist),
pickerInput("users", "Select user(s)", choices = userlist, selected = userlist, options = list('actions-box' = TRUE), multiple = TRUE),
p("Please do not deselect all users and click on render as it crashes the app"),
sliderInput("nframes", "Select the number of frames", min = 10, max = 50, value = 25),
p("Please keep in mind that higher number of frames will result in longer rendering times."),
sliderInput("fps", "Select frames per second", min = 1, max = 50, value = 10),
radioButtons("color", "Select the coloring of the datapoints", choices = c("user", "user.index"), selected = "user"),
fileInput("backImage", "Select a Map for Background", accept = c("image/jpeg", "image/png"), multiple = FALSE),
actionButton("Load", "Render")
),
mainPanel(h4("Please Wait While Animations Are Being Rendered"),
#textOutput("mymap"),
imageOutput("plot1")
)
)
))
runApp()
#Front-End
shinyUI(fluidPage(
titlePanel(title = "Animations"),
sidebarLayout(
sidebarPanel(h3("Select the Features"),
selectInput("map", "Select a map from the drop down list", maplist),
pickerInput("users", "Select user(s)", choices = userlist, selected = userlist, options = list('actions-box' = TRUE), multiple = TRUE),
p("Please do not deselect all users and click on render as it crashes the app"),
sliderInput("nframes", "Select the number of frames", min = 10, max = 50, value = 25),
p("Please keep in mind that higher number of frames will result in longer rendering times."),
sliderInput("fps", "Select frames per second", min = 1, max = 50, value = 10),
radioButtons("color", "Select the coloring of the datapoints", choices = c("user", "user.index"), selected = "user"),
fileInput("backImage", "Select a Map for Background", accept = c("image/jpeg", "image/png"), multiple = FALSE),
actionButton("Load", "Render")
),
mainPanel(h4("Please Wait While Animations Are Being Rendered"),
#textOutput("mymap"),
imageOutput("plot1")
)
)
))
library(jpeg)
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(gganimate)
library(jpeg)
library(ggpubr)
library(plyr)
map.data <- tracking_data[tracking_data["StimuliName"] == "01_Antwerpen_S1.jpg",]
rownames(map.data) <- 1:nrow(map.data)
map.data$index <- 1:nrow(map.data)
map.data$user.index <- 1:nrow(map.data)
user.count <- 1
for(i in 2:nrow(map.data)){
if(map.data[i, 7] == map.data[i-1, 7]){
user.count <- user.count + 1
map.data[i, 10] <- user.count
} else {
user.count <- 1
map.data[i, 10] = user.count
}
}
max.index <- map.data[map.data$user.index == max(map.data$user.index), 10]
img.file = file.choose()
img <- jpeg::readJPEG(img.file)
dim_img <- dim(img)
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration)) +
scale_size(range = c(8,30)) +
scale_y_reverse()
map_plot
map_anim = map_plot +
labs(title = "Frame = {frame_time}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1])
map_anim = map_plot +
labs(title = "Frame = {frame}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
map_plot <- ggplot(map.data, aes(x = MappedFixationPointX, y = MappedFixationPointY, color = user)) +
background_image(img) +
geom_point(aes(size = FixationDuration), alpha = 0.8) +
scale_size(range = c(5,15)) +
scale_y_reverse()
map_plot
map_anim = map_plot +
labs(title = "Frame = {frame}") +
transition_time(user.index) +
shadow_mark(past = TRUE) +
theme(plot.title = element_text(size = 26, face ="bold"))
animate(map_anim, nframes = 40, fps = 10, renderer = gifski_renderer(file = "map animation.gif"),
width = (dim_img[2] + 50), height = dim_img[1])
#Importing & Preprocessing Data
metro_data <- read.csv('metro_data.csv', sep = ';', encoding = "latin-1")
maplist <- unique(metro_data$StimuliName)
userlist <- metro_data$user %>% unique() %>% as.character()
userlist <- str_sort(userlist, numeric = TRUE)
library(ggpubr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderImage
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='dblanimation',
token='DB2ED94474ED48C10C50A6ADA13D4C73',
secret='<SECRET>')
rsconnect::setAccountInfo(name='dblanimation',
token='DB2ED94474ED48C10C50A6ADA13D4C73',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='dblanimation',
token='DB2ED94474ED48C10C50A6ADA13D4C73',
secret='<SECRET>')
Sys.setlocale(locale="en_US.UTF-8")
Sys.setlocale(locale="English")
rsconnect::setAccountInfo(name='dblanimation', token='DB2ED94474ED48C10C50A6ADA13D4C73', secret='NUlJnAn2PyCVmiD9YMiWvuBJNsXZRe8u2uVP3YR+')
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
deployApp()
runApp('~/GitHub/DBL-Backend/R/DBL')
deployApp()
shiny::runApp()
runApp()
runApp()
runApp()
maplist <- unique(metro_data$StimuliName)
runApp()
runApp()
